# -*- coding: utf-8 -*-
import os
from math import pi, sqrt
import pyvista as pv
from hyperbolic3d.gyro import gyrotube, gyrotriangle
import numpy as np
from scipy.spatial.transform import Rotation as R

vs = np.array([
 [-(1+2*sqrt(2))/2, -(1+sqrt(2))/2, -0.5, -0.5],
 [(1+2*sqrt(2))/2, -(1+sqrt(2))/2, -0.5, -0.5],
 [-(1+2*sqrt(2))/2, (1+sqrt(2))/2, -0.5, -0.5],
 [(1+2*sqrt(2))/2, (1+sqrt(2))/2, -0.5, -0.5],
 [-(1+2*sqrt(2))/2, -(1+sqrt(2))/2, 0.5, -0.5],
 [(1+2*sqrt(2))/2, -(1+sqrt(2))/2, 0.5, -0.5],
 [-(1+2*sqrt(2))/2, (1+sqrt(2))/2, 0.5, -0.5],
 [(1+2*sqrt(2))/2, (1+sqrt(2))/2, 0.5, -0.5],
 [-(1+2*sqrt(2))/2, -(1+sqrt(2))/2, -0.5, 0.5],
 [(1+2*sqrt(2))/2, -(1+sqrt(2))/2, -0.5, 0.5],
 [-(1+2*sqrt(2))/2, (1+sqrt(2))/2, -0.5, 0.5],
 [(1+2*sqrt(2))/2, (1+sqrt(2))/2, -0.5, 0.5],
 [-(1+2*sqrt(2))/2, -(1+sqrt(2))/2, 0.5, 0.5],
 [(1+2*sqrt(2))/2, -(1+sqrt(2))/2, 0.5, 0.5],
 [-(1+2*sqrt(2))/2, (1+sqrt(2))/2, 0.5, 0.5],
 [(1+2*sqrt(2))/2, (1+sqrt(2))/2, 0.5, 0.5],
 [-(1+2*sqrt(2))/2, -0.5, -(1+sqrt(2))/2, -0.5],
 [(1+2*sqrt(2))/2, -0.5, -(1+sqrt(2))/2, -0.5],
 [-(1+2*sqrt(2))/2, 0.5, -(1+sqrt(2))/2, -0.5],
 [(1+2*sqrt(2))/2, 0.5, -(1+sqrt(2))/2, -0.5],
 [-(1+2*sqrt(2))/2, -0.5, (1+sqrt(2))/2, -0.5],
 [(1+2*sqrt(2))/2, -0.5, (1+sqrt(2))/2, -0.5],
 [-(1+2*sqrt(2))/2, 0.5, (1+sqrt(2))/2, -0.5],
 [(1+2*sqrt(2))/2, 0.5, (1+sqrt(2))/2, -0.5],
 [-(1+2*sqrt(2))/2, -0.5, -(1+sqrt(2))/2, 0.5],
 [(1+2*sqrt(2))/2, -0.5, -(1+sqrt(2))/2, 0.5],
 [-(1+2*sqrt(2))/2, 0.5, -(1+sqrt(2))/2, 0.5],
 [(1+2*sqrt(2))/2, 0.5, -(1+sqrt(2))/2, 0.5],
 [-(1+2*sqrt(2))/2, -0.5, (1+sqrt(2))/2, 0.5],
 [(1+2*sqrt(2))/2, -0.5, (1+sqrt(2))/2, 0.5],
 [-(1+2*sqrt(2))/2, 0.5, (1+sqrt(2))/2, 0.5],
 [(1+2*sqrt(2))/2, 0.5, (1+sqrt(2))/2, 0.5],
 [-(1+sqrt(2))/2, -(1+2*sqrt(2))/2, -0.5, -0.5],
 [(1+sqrt(2))/2, -(1+2*sqrt(2))/2, -0.5, -0.5],
 [-(1+sqrt(2))/2, (1+2*sqrt(2))/2, -0.5, -0.5],
 [(1+sqrt(2))/2, (1+2*sqrt(2))/2, -0.5, -0.5],
 [-(1+sqrt(2))/2, -(1+2*sqrt(2))/2, 0.5, -0.5],
 [(1+sqrt(2))/2, -(1+2*sqrt(2))/2, 0.5, -0.5],
 [-(1+sqrt(2))/2, (1+2*sqrt(2))/2, 0.5, -0.5],
 [(1+sqrt(2))/2, (1+2*sqrt(2))/2, 0.5, -0.5],
 [-(1+sqrt(2))/2, -(1+2*sqrt(2))/2, -0.5, 0.5],
 [(1+sqrt(2))/2, -(1+2*sqrt(2))/2, -0.5, 0.5],
 [-(1+sqrt(2))/2, (1+2*sqrt(2))/2, -0.5, 0.5],
 [(1+sqrt(2))/2, (1+2*sqrt(2))/2, -0.5, 0.5],
 [-(1+sqrt(2))/2, -(1+2*sqrt(2))/2, 0.5, 0.5],
 [(1+sqrt(2))/2, -(1+2*sqrt(2))/2, 0.5, 0.5],
 [-(1+sqrt(2))/2, (1+2*sqrt(2))/2, 0.5, 0.5],
 [(1+sqrt(2))/2, (1+2*sqrt(2))/2, 0.5, 0.5],
 [-(1+sqrt(2))/2, -0.5, -(1+2*sqrt(2))/2, -0.5],
 [(1+sqrt(2))/2, -0.5, -(1+2*sqrt(2))/2, -0.5],
 [-(1+sqrt(2))/2, 0.5, -(1+2*sqrt(2))/2, -0.5],
 [(1+sqrt(2))/2, 0.5, -(1+2*sqrt(2))/2, -0.5],
 [-(1+sqrt(2))/2, -0.5, (1+2*sqrt(2))/2, -0.5],
 [(1+sqrt(2))/2, -0.5, (1+2*sqrt(2))/2, -0.5],
 [-(1+sqrt(2))/2, 0.5, (1+2*sqrt(2))/2, -0.5],
 [(1+sqrt(2))/2, 0.5, (1+2*sqrt(2))/2, -0.5],
 [-(1+sqrt(2))/2, -0.5, -(1+2*sqrt(2))/2, 0.5],
 [(1+sqrt(2))/2, -0.5, -(1+2*sqrt(2))/2, 0.5],
 [-(1+sqrt(2))/2, 0.5, -(1+2*sqrt(2))/2, 0.5],
 [(1+sqrt(2))/2, 0.5, -(1+2*sqrt(2))/2, 0.5],
 [-(1+sqrt(2))/2, -0.5, (1+2*sqrt(2))/2, 0.5],
 [(1+sqrt(2))/2, -0.5, (1+2*sqrt(2))/2, 0.5],
 [-(1+sqrt(2))/2, 0.5, (1+2*sqrt(2))/2, 0.5],
 [(1+sqrt(2))/2, 0.5, (1+2*sqrt(2))/2, 0.5],
 [-0.5, -(1+2*sqrt(2))/2, -(1+sqrt(2))/2, -0.5],
 [0.5, -(1+2*sqrt(2))/2, -(1+sqrt(2))/2, -0.5],
 [-0.5, (1+2*sqrt(2))/2, -(1+sqrt(2))/2, -0.5],
 [0.5, (1+2*sqrt(2))/2, -(1+sqrt(2))/2, -0.5],
 [-0.5, -(1+2*sqrt(2))/2, (1+sqrt(2))/2, -0.5],
 [0.5, -(1+2*sqrt(2))/2, (1+sqrt(2))/2, -0.5],
 [-0.5, (1+2*sqrt(2))/2, (1+sqrt(2))/2, -0.5],
 [0.5, (1+2*sqrt(2))/2, (1+sqrt(2))/2, -0.5],
 [-0.5, -(1+2*sqrt(2))/2, -(1+sqrt(2))/2, 0.5],
 [0.5, -(1+2*sqrt(2))/2, -(1+sqrt(2))/2, 0.5],
 [-0.5, (1+2*sqrt(2))/2, -(1+sqrt(2))/2, 0.5],
 [0.5, (1+2*sqrt(2))/2, -(1+sqrt(2))/2, 0.5],
 [-0.5, -(1+2*sqrt(2))/2, (1+sqrt(2))/2, 0.5],
 [0.5, -(1+2*sqrt(2))/2, (1+sqrt(2))/2, 0.5],
 [-0.5, (1+2*sqrt(2))/2, (1+sqrt(2))/2, 0.5],
 [0.5, (1+2*sqrt(2))/2, (1+sqrt(2))/2, 0.5],
 [-0.5, -(1+sqrt(2))/2, -(1+2*sqrt(2))/2, -0.5],
 [0.5, -(1+sqrt(2))/2, -(1+2*sqrt(2))/2, -0.5],
 [-0.5, (1+sqrt(2))/2, -(1+2*sqrt(2))/2, -0.5],
 [0.5, (1+sqrt(2))/2, -(1+2*sqrt(2))/2, -0.5],
 [-0.5, -(1+sqrt(2))/2, (1+2*sqrt(2))/2, -0.5],
 [0.5, -(1+sqrt(2))/2, (1+2*sqrt(2))/2, -0.5],
 [-0.5, (1+sqrt(2))/2, (1+2*sqrt(2))/2, -0.5],
 [0.5, (1+sqrt(2))/2, (1+2*sqrt(2))/2, -0.5],
 [-0.5, -(1+sqrt(2))/2, -(1+2*sqrt(2))/2, 0.5],
 [0.5, -(1+sqrt(2))/2, -(1+2*sqrt(2))/2, 0.5],
 [-0.5, (1+sqrt(2))/2, -(1+2*sqrt(2))/2, 0.5],
 [0.5, (1+sqrt(2))/2, -(1+2*sqrt(2))/2, 0.5],
 [-0.5, -(1+sqrt(2))/2, (1+2*sqrt(2))/2, 0.5],
 [0.5, -(1+sqrt(2))/2, (1+2*sqrt(2))/2, 0.5],
 [-0.5, (1+sqrt(2))/2, (1+2*sqrt(2))/2, 0.5],
 [0.5, (1+sqrt(2))/2, (1+2*sqrt(2))/2, 0.5]
])

edges = [
 [0, 4],
 [0, 8],
 [0, 16],
 [0, 32],
 [1, 5],
 [1, 9],
 [1, 17],
 [1, 33],
 [2, 6],
 [2, 10],
 [2, 18],
 [2, 34],
 [3, 7],
 [3, 11],
 [3, 19],
 [3, 35],
 [4, 12],
 [4, 20],
 [4, 36],
 [5, 13],
 [5, 21],
 [5, 37],
 [6, 14],
 [6, 22],
 [6, 38],
 [7, 15],
 [7, 23],
 [7, 39],
 [8, 12],
 [8, 24],
 [8, 40],
 [9, 13],
 [9, 25],
 [9, 41],
 [10, 14],
 [10, 26],
 [10, 42],
 [11, 15],
 [11, 27],
 [11, 43],
 [12, 28],
 [12, 44],
 [13, 29],
 [13, 45],
 [14, 30],
 [14, 46],
 [15, 31],
 [15, 47],
 [16, 18],
 [16, 24],
 [16, 48],
 [17, 19],
 [17, 25],
 [17, 49],
 [18, 26],
 [18, 50],
 [19, 27],
 [19, 51],
 [20, 22],
 [20, 28],
 [20, 52],
 [21, 23],
 [21, 29],
 [21, 53],
 [22, 30],
 [22, 54],
 [23, 31],
 [23, 55],
 [24, 26],
 [24, 56],
 [25, 27],
 [25, 57],
 [26, 58],
 [27, 59],
 [28, 30],
 [28, 60],
 [29, 31],
 [29, 61],
 [30, 62],
 [31, 63],
 [32, 36],
 [32, 40],
 [32, 64],
 [33, 37],
 [33, 41],
 [33, 65],
 [34, 38],
 [34, 42],
 [34, 66],
 [35, 39],
 [35, 43],
 [35, 67],
 [36, 44],
 [36, 68],
 [37, 45],
 [37, 69],
 [38, 46],
 [38, 70],
 [39, 47],
 [39, 71],
 [40, 44],
 [40, 72],
 [41, 45],
 [41, 73],
 [42, 46],
 [42, 74],
 [43, 47],
 [43, 75],
 [44, 76],
 [45, 77],
 [46, 78],
 [47, 79],
 [48, 50],
 [48, 56],
 [48, 80],
 [49, 51],
 [49, 57],
 [49, 81],
 [50, 58],
 [50, 82],
 [51, 59],
 [51, 83],
 [52, 54],
 [52, 60],
 [52, 84],
 [53, 55],
 [53, 61],
 [53, 85],
 [54, 62],
 [54, 86],
 [55, 63],
 [55, 87],
 [56, 58],
 [56, 88],
 [57, 59],
 [57, 89],
 [58, 90],
 [59, 91],
 [60, 62],
 [60, 92],
 [61, 63],
 [61, 93],
 [62, 94],
 [63, 95],
 [64, 65],
 [64, 72],
 [64, 80],
 [65, 73],
 [65, 81],
 [66, 67],
 [66, 74],
 [66, 82],
 [67, 75],
 [67, 83],
 [68, 69],
 [68, 76],
 [68, 84],
 [69, 77],
 [69, 85],
 [70, 71],
 [70, 78],
 [70, 86],
 [71, 79],
 [71, 87],
 [72, 73],
 [72, 88],
 [73, 89],
 [74, 75],
 [74, 90],
 [75, 91],
 [76, 77],
 [76, 92],
 [77, 93],
 [78, 79],
 [78, 94],
 [79, 95],
 [80, 81],
 [80, 88],
 [81, 89],
 [82, 83],
 [82, 90],
 [83, 91],
 [84, 85],
 [84, 92],
 [85, 93],
 [86, 87],
 [86, 94],
 [87, 95],
 [88, 89],
 [90, 91],
 [92, 93],
 [94, 95]
]

squares = [
 [16, 18, 50, 48],
 [16, 24, 56, 48],
 [16, 18, 26, 24],
 [24, 26, 58, 56],
 [18, 26, 58, 50],
 [48, 50, 58, 56],
 [0, 4, 12, 8],
 [0, 8, 40, 32],
 [0, 4, 36, 32],
 [32, 36, 44, 40],
 [8, 12, 44, 40],
 [4, 12, 44, 36],
 [64, 72, 88, 80],
 [64, 65, 81, 80],
 [64, 65, 73, 72],
 [65, 73, 89, 81],
 [80, 81, 89, 88],
 [72, 73, 89, 88],
 [33, 37, 45, 41],
 [5, 13, 45, 37],
 [1, 5, 37, 33],
 [1, 9, 41, 33],
 [1, 5, 13, 9],
 [9, 13, 45, 41],
 [2, 6, 14, 10],
 [2, 6, 38, 34],
 [6, 14, 46, 38],
 [10, 14, 46, 42],
 [2, 10, 42, 34],
 [34, 38, 46, 42],
 [68, 69, 77, 76],
 [69, 77, 93, 85],
 [68, 76, 92, 84],
 [84, 85, 93, 92],
 [68, 69, 85, 84],
 [76, 77, 93, 92],
 [20, 22, 30, 28],
 [20, 28, 60, 52],
 [22, 30, 62, 54],
 [20, 22, 54, 52],
 [28, 30, 62, 60],
 [52, 54, 62, 60],
 [21, 29, 61, 53],
 [21, 23, 31, 29],
 [21, 23, 55, 53],
 [29, 31, 63, 61],
 [53, 55, 63, 61],
 [23, 31, 63, 55],
 [70, 78, 94, 86],
 [70, 71, 79, 78],
 [70, 71, 87, 86],
 [78, 79, 95, 94],
 [86, 87, 95, 94],
 [71, 79, 95, 87],
 [35, 39, 47, 43],
 [7, 15, 47, 39],
 [3, 7, 39, 35],
 [3, 11, 43, 35],
 [11, 15, 47, 43],
 [3, 7, 15, 11],
 [66, 74, 90, 82],
 [66, 67, 75, 74],
 [66, 67, 83, 82],
 [82, 83, 91, 90],
 [67, 75, 91, 83],
 [74, 75, 91, 90],
 [19, 27, 59, 51],
 [25, 27, 59, 57],
 [17, 19, 27, 25],
 [49, 51, 59, 57],
 [17, 19, 51, 49],
 [17, 25, 57, 49]
]

h = np.linalg.norm(vs[1,:])
def sproj(p):
    return p[0:3] / (h-p[3])
pvs = np.apply_along_axis(sproj, 1, vs)

s = 0.5

def rmatrix(alpha):
    r = R.from_rotvec(alpha/sqrt(3) * np.array([1, 1, 1]))
    mat = r.as_matrix()
    return np.hstack((np.vstack((mat, [0, 0, 0])), [[0], [0], [0], [1]]))

alpha_ = np.linspace(0, 2*pi, 101)[:100]
matrices = [rmatrix(alpha) for alpha in alpha_]

for i, matrix in enumerate(matrices):
    pltr = pv.Plotter(window_size=[512,512], off_screen=True)
    pltr.set_background("#363940")
    pltr.set_focus([0, 0, 0])
    pltr.set_position((3.8, 3.8, 3.8))
    pltr.camera.model_transform_matrix = matrix
    for light in pltr.renderer.lights:
        light.transform_matrix = matrix
    pngname = "pngs/zpic%03d.png" % i
    for v in pvs:
        sphere = pv.Sphere(0.05, center=v)
        pltr.add_mesh(sphere, color="gold", smooth_shading=True, specular=15)
    for edge in edges:
        A = pvs[edge[0], :]
        B = pvs[edge[1], :]
        tube = gyrotube(A, B, s, 0.025)
        pltr.add_mesh(tube, color="gold", smooth_shading=True, specular=15)
    for square in squares:
        A = pvs[square[0], :]
        B = pvs[square[1], :]
        C = pvs[square[2], :]
        D = pvs[square[3], :]
        mesh1 = gyrotriangle(A, B, C, s)
        mesh2 = gyrotriangle(A, C, D, s)
        mesh = mesh1.merge(mesh2)
        pltr.add_mesh(mesh, color="orangered", smooth_shading=True, specular=15)
    pltr.show(screenshot=pngname)