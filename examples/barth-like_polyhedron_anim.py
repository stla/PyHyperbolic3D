# -*- coding: utf-8 -*-
import os
from math import pi, cos, sin
import pyvista as pv
from hyperbolic3d.gyro import gyrotube, gyrotriangle
import numpy as np

vertices = [
       [0, 0, 3.23606797749979],
       [0, 3.23606797749979, 0],
       [3.23606797749979, 0, 0],
       [0, 0, -3.23606797749979],
       [0, -3.23606797749979, 0],
       [-3.23606797749979, 0, 0],
       [1, 1.61803398874989, 2.61803398874989],
       [1, 1.61803398874989, -2.61803398874989],
       [1, -1.61803398874989, 2.61803398874989],
       [-1, 1.61803398874989, 2.61803398874989],
       [1, -1.61803398874989, -2.61803398874989],
       [-1, 1.61803398874989, -2.61803398874989],
       [-1, -1.61803398874989, 2.61803398874989],
       [-1, -1.61803398874989, -2.61803398874989],
       [1.61803398874989, 2.61803398874989, 1],
       [1.61803398874989, -2.61803398874989, 1],
       [-1.61803398874989, 2.61803398874989, 1],
       [1.61803398874989, 2.61803398874989, -1],
       [-1.61803398874989, -2.61803398874989, 1],
       [1.61803398874989, -2.61803398874989, -1],
       [-1.61803398874989, 2.61803398874989, -1],
       [-1.61803398874989, -2.61803398874989, -1],
       [2.61803398874989, 1, 1.61803398874989],
       [-2.61803398874989, 1, 1.61803398874989],
       [2.61803398874989, 1, -1.61803398874989],
       [2.61803398874989, -1, 1.61803398874989],
       [-2.61803398874989, 1, -1.61803398874989],
       [-2.61803398874989, -1, 1.61803398874989],
       [2.61803398874989, -1, -1.61803398874989],
       [-2.61803398874989, -1, -1.61803398874989],
       [0, 2.15737865166653, 5.64809063666639],
       [0, 2.15737865166653, -5.64809063666639],
       [-3.49071198499986, 3.49071198499986, 3.49071198499986],
       [3.49071198499986, 3.49071198499986, 3.49071198499986],
       [0, -2.15737865166653, 5.64809063666639],
       [0, -2.15737865166653, -5.64809063666639],
       [-2.15737865166653, 5.64809063666639, 0],
       [-3.49071198499986, 3.49071198499986, -3.49071198499986],
       [2.15737865166653, -5.64809063666639, 0],
       [3.49071198499986, -3.49071198499986, 3.49071198499986],
       [5.64809063666639, 0, 2.15737865166653],
       [2.15737865166653, 5.64809063666639, 0],
       [3.49071198499986, 3.49071198499986, -3.49071198499986],
       [5.64809063666639, 0, -2.15737865166653],
       [3.49071198499986, -3.49071198499986, -3.49071198499986],
       [-2.15737865166653, -5.64809063666639, 0],
       [-5.64809063666639, 0, 2.15737865166653],
       [-3.49071198499986, -3.49071198499986, 3.49071198499986],
       [-5.64809063666639, 0, -2.15737865166653],
       [-3.49071198499986, -3.49071198499986, -3.49071198499986]
]


faces = [
       [0, 6, 9],
       [0, 6, 30],
       [0, 9, 30],
       [6, 9, 30],
       [3, 7, 11],
       [3, 7, 31],
       [3, 11, 31],
       [7, 11, 31],
       [9, 16, 23],
       [9, 16, 32],
       [9, 23, 32],
       [16, 23, 32],
       [6, 14, 22],
       [6, 14, 33],
       [6, 22, 33],
       [14, 22, 33],
       [0, 8, 12],
       [0, 8, 34],
       [0, 12, 34],
       [8, 12, 34],
       [3, 10, 13],
       [3, 10, 35],
       [3, 13, 35],
       [10, 13, 35],
       [1, 16, 20],
       [1, 16, 36],
       [1, 20, 36],
       [16, 20, 36],
       [11, 20, 26],
       [11, 20, 37],
       [11, 26, 37],
       [20, 26, 37],
       [4, 15, 19],
       [4, 15, 38],
       [4, 19, 38],
       [15, 19, 38],
       [8, 15, 25],
       [8, 15, 39],
       [8, 25, 39],
       [15, 25, 39],
       [2, 22, 25],
       [2, 22, 40],
       [2, 25, 40],
       [22, 25, 40],
       [1, 14, 17],
       [1, 14, 41],
       [1, 17, 41],
       [14, 17, 41],
       [7, 17, 24],
       [7, 17, 42],
       [7, 24, 42],
       [17, 24, 42],
       [2, 24, 28],
       [2, 24, 43],
       [2, 28, 43],
       [24, 28, 43],
       [10, 19, 28],
       [10, 19, 44],
       [10, 28, 44],
       [19, 28, 44],
       [4, 18, 21],
       [4, 18, 45],
       [4, 21, 45],
       [18, 21, 45],
       [5, 23, 27],
       [5, 23, 46],
       [5, 27, 46],
       [23, 27, 46],
       [12, 18, 27],
       [12, 18, 47],
       [12, 27, 47],
       [18, 27, 47],
       [5, 26, 29],
       [5, 26, 48],
       [5, 29, 48],
       [26, 29, 48],
       [13, 21, 29],
       [13, 21, 49],
       [13, 29, 49],
       [21, 29, 49]
]

edges = []
for f in faces:
    edges = edges + [[f[0], f[1]], [f[0], f[2]], [f[1], f[2]]]
edges = np.array(edges, dtype=int)
edges = np.unique(edges, axis=0)


def rmatrix(alpha):
    return np.array([
        [cos(alpha), -sin(alpha), 0, 0],
        [sin(alpha),  cos(alpha), 0, 0],
        [        0,           0,  1, 0],
        [        0,           0,  0, 1]
    ])
matrices = [rmatrix(alpha) for alpha in np.linspace(0, 2*pi, 181)[:180]]



s     = 1
r     = 0.04
depth = 5

for i, matrix in enumerate(matrices[:3]):
    pl = pv.Plotter(window_size=[512,512])#, off_screen=True)
    pl.set_background("#363940")
    for light in pl.renderer.lights:
        light.transform_matrix = matrix
        #light.position = matrix[0:3, 0:3].dot(np.asarray(light.position))
    for vertex in vertices:
        V = pv.Sphere(2 * r, center=vertex)
        pl.add_mesh(V, smooth_shading=True, color="navy")
    for edge in edges:
        A = vertices[edge[0]]
        B = vertices[edge[1]]
        AB = gyrotube(A, B, s, r)
        pl.add_mesh(AB, smooth_shading=True, color="navy")
    for face in faces:
        A = vertices[face[0]]
        B = vertices[face[1]]
        C = vertices[face[2]]
        tmesh = gyrotriangle(A, B, C, s, depth)
        pl.add_mesh(tmesh, smooth_shading=True, specular=5, color="orange")
    pl.set_focus((0, 0, 0))
    pl.set_position((15, 15, 15))
    pl.camera.model_transform_matrix = matrix
    pngname = "pngs/pic%03d.png" % i
    pl.show()#screenshot=pngname)

# os.system(
#     "magick convert -dispose previous -loop 0 -delay 8 pngs/pic*.png BarthHyperbolicpolyhedron.gif"    
# )
